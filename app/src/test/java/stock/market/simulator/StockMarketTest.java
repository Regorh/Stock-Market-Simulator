/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stock.market.simulator;

import stock.controller.*;
import stock.model.*;
import stock.view.*;



import org.junit.Test;
import stock.App;

import static org.junit.Assert.*;

public class StockMarketTest {
    
    @Test public void market_init() {
        Market market = new Market();

        // ensure that 100 stocks are being made;
        // test necessary due to collision risk of names
        assertEquals(market.get_stock_names().size(), 100);
        
        // stability checks
        market.process_event("high_stability");
        assertEquals(market.get_stability(), 4);

        market.process_event("high_uncertainty");
        assertEquals(market.get_stability(), 1);
    }

    @Test public void user_buy() {
        User user = new User(500);
        user.setCapital(500);
        user.buyStock("abc", 20, 1);

        assertEquals(
            true, 
            user.get_user_stocks().containsKey("abc")
            && user.get_user_stocks().get("abc") == 1
            && user.getCapital() == 480
        );
    }

    @Test public void user_sell(){
        User user = new User(500);
        user.setCapital(500);
        user.buyStock("abc", 1, 1);
        user.buyStock("abc", 1, 1);
        user.buyStock("abc", 1, 1);
        user.sellStock("abc", 1, 1);

        assertEquals(
            true, 
            user.get_user_stocks().containsKey("abc")
            && user.get_user_stocks().get("abc") == 2
            && user.getCapital() == 498
        );
    }


    @Test public void user_stress() {
        User user = new User(500);
        user.increaseStress(45);
        user.decreaseStress(20);

        assertEquals(
            true, 
            user.get_stress() == 25
        );
    
    }
    

    @Test public void user_payoff(){
        User user = new User(500);
        user.setPayoff(50);
        user.setcurrentDebt(100);
        user.payoffDebt();

        
        assertEquals(
            true,
            user.getcurrentDebt() == 50
        );

    }

    
}
